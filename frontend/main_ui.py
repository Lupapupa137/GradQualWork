import os
import streamlit as st
import pandas as pd
import tempfile
from backend.rules import parse_input_table, load_post_rules
from backend.parse_format import split_by_posts_and_export

from backend.database import get_orders, get_order_by_id, insert_order, clean_data


st.set_page_config(page_title="–ü–∞—Ä—Å–µ—Ä –∑–∞–∫–∞–∑–æ–≤ Stilpark", layout="wide")

st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:", ("–ü–∞—Ä—Å–µ—Ä –∑–∞–∫–∞–∑–æ–≤", "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"))

if page == "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤":
    st.title("üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")

    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
        try:
            orders = get_orders()

            if not orders:
                st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            else:
                orders_data = [o.as_dict() for o in orders]

                df_orders = pd.DataFrame(orders_data)
                st.dataframe(df_orders)

                min_date = df_orders["–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"].min()
                max_date = df_orders["–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"].max()
                st.success(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Å {min_date} –ø–æ {max_date}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        st.info("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤.")

    st.stop()


st.title("üì¶ Stilpark Order Splitter")

st.markdown(
    """
–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Ö–æ–¥–Ω–æ–π Excel-—Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å Excel-—Ñ–∞–π–ª—ã, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø–æ –ø–æ—Å—Ç–∞–º.

**–§–∞–π–ª Posts.xlsx** –¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å —Ä—è–¥–æ–º —Å —ç—Ç–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–π –∏ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ—Å—Ç–æ–≤.
"""
)

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞ (.xlsx)", type=["xlsx"])

output_folder = "backend/output_tmp"
os.makedirs(output_folder, exist_ok=True)

manager_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–±—É–¥–µ—Ç –≤ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ):", "")
comments = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–±—É–¥–µ—Ç –≤ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ):", "")
internal_number = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä (–±—É–¥–µ—Ç –≤ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ):", "")
delivery_date = st.text_input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–±—É–¥–µ—Ç –≤ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ):", "")

st.markdown(
    "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª `Posts.xlsx`. –ï—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
)
custom_posts_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –ø–æ—Å—Ç–æ–≤ (.xlsx)", type=["xlsx"], key="posts"
)

if st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"):
    if not uploaded_file:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–æ–º.")
    elif not manager_name.strip():
        st.warning("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
    elif not internal_number.strip():
        st.warning("–í–≤–µ–¥–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä.")
    elif not delivery_date.strip():
        st.warning("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.")
    else:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            tmp.write(uploaded_file.read())
            tmp_path = tmp.name

        # fallback –¥–ª—è —Ñ–∞–π–ª–∞ Posts
        if custom_posts_file:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp_posts:
                tmp_posts.write(custom_posts_file.read())
                posts_path = tmp_posts.name
        else:
            posts_path = "backend/Posts.xlsx"

        try:
            df = parse_input_table(tmp_path)
            rules = load_post_rules(posts_path)

            result_files, order_record = split_by_posts_and_export(
                tmp_path,
                df,
                rules,
                output_folder,
                manager_name,
                comments,
                internal_number,
                delivery_date,
            )

            existing_order = get_order_by_id(order_record["order_id"])
            if existing_order:
                st.warning(
                    f"–ó–∞–∫–∞–∑ {order_record['order_id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ. –ó–∞–ø–∏—Å—å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
                )
            else:
                insert_order(clean_data(order_record))
                st.success(f"–ó–∞–∫–∞–∑ {order_record['order_id']} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω.")

            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            for post_name, file in result_files.items():
                st.download_button(
                    label=f"üì• –°–∫–∞—á–∞—Ç—å {post_name}.xlsx",
                    data=file,
                    file_name=f"{post_name}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    key=post_name,
                )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")
